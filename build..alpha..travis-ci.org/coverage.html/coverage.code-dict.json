{"/home/travis/build/npmtest/node-npmtest-likely/test.js":"/* istanbul instrument in package npmtest_likely */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-likely/lib.npmtest_likely.js":"/* istanbul instrument in package npmtest_likely */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_likely = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_likely = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-likely/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-likely && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_likely */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_likely\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_likely.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_likely.rollup.js'] =\n            local.assetsDict['/assets.npmtest_likely.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_likely.__dirname + '/lib.npmtest_likely.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-likely/node_modules/likely/likely.js":"/**\n * Likely.js \n * \n * Javascript library for collaborative filtering / recommendation engine. \n */\nvar sylvester = require('sylvester');\n \n// Learning parameters\nvar DESCENT_STEPS = 5000; // number of iterations to execute gradient descent \nvar ALPHA = 0.0005;       // learning rate, should be small\nvar BETA = 0.0007;        // regularization factor, should be small\nvar K = 5; \t\t\t\t  // number of features to simulate\nvar MAX_ERROR = 0.0005;\t  // threshold which, if reached, will stop descent automatically\n\n/** Builds a complete model from the input array \n *\n * @param inputArray A two dimensional array of the input, where each cell is the rating given to Col by Row\n * @param [optional] rowLabels A one dimensional array of string labels for each row of inputArray\n * @param [optional] colLabels A one dimensional array of string labels for each column of inputArray\n * @returns Model An instance of a Model object\n */\nfunction buildModel(inputArray, rowLabels, colLabels)\n{\n\treturn buildModelWithBias(inputArray, undefined, rowLabels, colLabels);\n}\n\n/** Builds a complete model from the input array with bias\n *\n * @param inputArray A two dimensional array of the input, where each cell is the rating given to Col by Row\n * @param bias A two dimensional matrix of the bias of the inputArray\n * @param [optional] rowLabels A one dimensional array of string labels for each row of inputArray\n * @param [optional] colLabels A one dimensional array of string labels for each column of inputArray\n * @returns Model An instance of a Model object\n */\nfunction buildModelWithBias(inputArray, bias, rowLabels, colLabels)\n{\n\tvar model = new Model($M(inputArray), rowLabels, colLabels);\n\tmodel.estimated = train(sylvester.Matrix.create(inputArray), bias);\n\t\n\treturn model\n}\n\n/** \n * Trains the model on the given input by composing two matrices P and Q which\n * approximate the input through their product. \n * @param inputMatrix A two dimensional array representing input values\n * @returns Model A model entity, with estimated values based on the input\n */\nfunction train(inputMatrix, bias)\n{\n  N = inputMatrix.rows();    // number of rows \n  M = inputMatrix.cols(); // number of columns\n  \n  // Generate random P and Q based on the dimensions of inputMatrix\n  var P_model = generateRandomMatrix(N, K);\n  var Q_model = generateRandomMatrix(K, M);\n  \n  var i = 0\n  for(i = 0; i < DESCENT_STEPS; i++)\n  {\n  \t//console.log('------------------ Iteration --------------------');\n    // Calculate error\n    var error = calculateError(P_model.x(Q_model), inputMatrix, bias);\n\n\tP_prime = P_model.elements;\n\tQ_prime = Q_model.elements;\n\t\n\t// For debugging\n\t//console.log('P: ' + JSON.stringify(P_prime));\n\t//console.log('Q: ' + JSON.stringify(Q_prime));\n\t\n\t// Update P and Q to reduce error\n    for (var row = 0; row < N; row++)\n    {\n    \tfor (var col = 0; col < M; col++)\n    \t{\n    \t\tfor(var feature = 0; feature < K; feature++)\n    \t\t{\n    \t\t\t// update formulas will change values in the opposite direction of the gradient.\n    \t\t\t\n    \t\t\t// P Update Formula\n    \t\t\t// p_ik = p_ik + alpha * (e_ij * q_kj - beta * p_ik)\n    \t\t\t// Reverse Gradient: alpha * e_ij * q_kj   -- Note that we omit the 2* factor since it's not necessary for convergence.\n    \t\t\t// Regularization factor: alpha * beta * p_ik \n    \t\t\tvar p_prev = P_prime[row][feature];\n    \t\t\tP_prime[row][feature] = P_prime[row][feature] + \n    \t\t\t\t\t\t\t\t\t  ALPHA*(error.e(row+1, col+1)*Q_prime[feature][col] -\n    \t\t\t\t\t\t\t\t\t  \t    BETA * P_prime[row][feature]);\n    \t\t\t//console.log('P['+row+']['+feature+'] ('+p_prev+') <- ('+P_prime[row][feature]+')');\n    \t\t\t\t\t\t\t\t\t  \t   \n    \t\t\t// Q Update Formula\n    \t\t\t// q_kj = q_kj + alpha x (e_ij x p_ik - beta x q_kj)\n    \t\t\t// Reverse Gradient: alpha * e_ij * p_ik   -- Note that we omit the 2* factor since it's not necessary for convergence.\n    \t\t\t// Regularization factor: alpha * beta * q_kj  \n    \t\t\tvar q_prev = Q_prime[feature][col];\n  \t\t\t\tQ_prime[feature][col] = Q_prime[feature][col] +\n  \t\t\t\t\t\t\t\t\t\t\t ALPHA *(error.e(row+1, col+1)*P_prime[row][feature] -\n  \t\t\t\t\t\t\t\t\t\t\t \t\tBETA * Q_prime[feature][col]);  \t\n    \t\t\t//console.log('Q['+feature+']['+col+'] ('+q_prev+') <- ('+Q_prime[feature][col]+')');\t\t\t\t\t\t\t\t  \t    \n    \t\t\t\t\t\t\t\t\t  \t\n            }\n    \t}\n    }\n    \n    // if we've already reached the error threshold, no need to descend further\n    var totError = calculateTotalError(error);\n    if(totError < MAX_ERROR)\n    {\n    \t//console.log('Reached error threshold early, no more descent needed.');\n\t    break;\n    }\n  }\n  \n  //console.log('Descent steps used: ' + i);\n  \n  // produce the final estimation by multiplying P and Q\n  var finalModel = P_model.x(Q_model); \n  \n  // if we were considering bias, we have to add it back in\n  if(bias)\n  {\n  \t\t// add back the overall average\n  \t\tfinalModel = finalModel.map(function(x) { return x + bias.average; });\n  \t\n\t\tvar finalElements = finalModel.elements;\n\t\t\n\t\t// add back the row bias from each row\n\t\tfor(var i = 1; i <= finalModel.rows(); i++)\n\t\t{\n\t\t\tfor(var j = 1; j <= finalModel.cols(); j++)\n\t\t\t{\n\t\t\t\tfinalElements[i-1][j-1] += bias.rowBiases.e(i);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add back the column bias from each column\n\t\tfor(var i = 1; i <= finalModel.rows(); i++)\n\t\t{\n\t\t\tfor(var j = 1; j <= finalModel.cols(); j++)\n\t\t\t{\n\t\t\t\tfinalElements[i-1][j-1] += bias.colBiases.e(j);\n\t\t\t}\n\t\t}\n  }\n  \n  return finalModel;\n}\n\n/**\n * Generates a random Matrix of size rows x columns.\n * @param rows Number of rows in the random matrix\n * @param columns Number of columns in the random matrix\n * @returns Matrix A matrix of size rows x columns filled with random values.\n */\nfunction generateRandomMatrix(rows, columns)\n{\n\treturn sylvester.Matrix.Random(rows, columns);\n}\n\n/**\n * Computes the error from model matrices P and Q against the given input. \n * @param estimated A matrix of the estimated values.\n * @param input A matrix of the input values\n * @returns A matrix of size input.rows by input.columns where each entry is the difference between the input and estimated values.\n */\nfunction calculateError(estimated, input, bias)\n{ \t\n\tvar adjustedInput = input.dup();\n\t\n\tvar adjustedElements = adjustedInput.elements;\n\t\t\n\t// If bias adjustment is provided, adjust for it\n\tif(bias)\n\t{\n\t\t// subtract the row and column bias from each row\n\t\tfor(var i = 0; i <= adjustedInput.rows()-1; i++)\n\t\t{\n\t\t\tfor(var j = 0; j <= adjustedInput.cols()-1; j++)\n\t\t\t{\n\t\t\t\tif(adjustedElements[i][j] == 0) continue; // skip zeroes\n\t\t\t\t\n\t\t\t\tadjustedElements[i][j] -= bias.average;\n\t\t\t\t\n\t\t\t\tadjustedElements[i][j] -= bias.rowBiases.e(i+1);\n\t\t\t\t\n\t\t\t\tadjustedElements[i][j] -= bias.colBiases.e(j+1);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\tvar estimatedElements = estimated.elements;\n\t\n\t// Error is (R - R')\n\t// (but we ignore error on the zero entries since they are unknown)\n\tfor(var i = 0; i <= adjustedInput.rows()-1; i++)\n\t{\n\t\tfor(var j = 0; j <= adjustedInput.cols()-1; j++)\n\t\t{\n\t\t\tif(adjustedElements[i][j] == 0) continue; // skip zeroes\n\t\t\t\n\t\t\tadjustedElements[i][j] -= estimatedElements[i][j];\n\t\t}\n\t}\t\t\t\t\n\n\t// Error is (R - R')\n\treturn adjustedInput;\n}\n\n/**\n * Computes the total error based on a matrix of error values.\n * @param estimated A matrix of the estimated values.\n * @param input A matrix of the input values\n * @returns float Total error, defined as the sum of the squared difference between the estimated and input values. \n */\nfunction calculateTotalError(estimated, input)\n{\n\treturn calculateTotalError(calculateError(estimated, input));\n}\n\n/**\n * Computes the total error based on a matrix of error values.\n * @param errorMatrix A matrix of the error values.\n * @returns float Total error, defined as the sum of the squared errors. \n */\nfunction calculateTotalError(errorMatrix)\n{\n\tvar totError = 0.0;\n\tfor(var i = 1; i <= errorMatrix.rows(); i++)\n\t{\n\t\tfor(var j = 1; j <= errorMatrix.cols(); j++)\n\t\t{\n\t\t\ttotError += Math.pow(errorMatrix.e(i, j), 2);\n\t\t}\n\t}\n\t\n\treturn totError;\n}\n\n/**\n * Computes the biases from a matrix of values. \n * @param input A matrix of the input values\n * @returns Bias Object containing the average, bias for rows and bias for columns.\n */\nfunction calculateBias(input)\n{\n\tvar inputMatrix = $M(input);\n\tvar average = calculateMatrixAverage(inputMatrix);\n\tvar rowAverages = calculateRowAverage(inputMatrix);\n\tvar colAverages = calculateColumnAverage(inputMatrix);\n\t\n\tvar rowBiases = new Array();\n\tvar colBiases = new Array();\n\t\n\t// The row bias is the difference between the row average and the overall average\n\tfor(var i = 1; i <= rowAverages.dimensions().cols; i++)\n\t{\n\t\trowBiases[i-1] = rowAverages.e(i) - average;\n\t}\n\t\n\t// the column bias is the difference between the column average and the overall average\n\tfor(var i = 1; i <= colAverages.dimensions().cols; i++)\n\t{\n\t\tcolBiases[i-1] = colAverages.e(i) - average;\n\t}\n\t\n\tvar biases = new Bias(average, $V(rowBiases), $V(colBiases));\n\t\n\treturn biases;\n}\n\n/**\n * Bias representation object. Contains all bias elements.\n */\nfunction Bias(average, rowBiases, colBiases) {\n\tthis.average = average;\t\t// Overall value average\n\tthis.rowBiases = rowBiases; // Bias for each row\n\tthis.colBiases = colBiases;\t// Bias for each column\n}\n\n/**\n * Computes the overall average value from a matrix of values. \n * @param input A matrix of the input values\n * @returns float Average value.\n */\nfunction calculateMatrixAverage(inputMatrix)\n{\n\tvar cells = inputMatrix.rows() * inputMatrix.cols();\n\t\n\tvar sum = 0;\n\tfor(var i = 1; i <= inputMatrix.rows(); i++)\n\t{\n\t\tfor(var j = 1; j <= inputMatrix.cols(); j++)\n\t\t{\n\t\t\tsum += inputMatrix.e(i, j);\n\t\t}\n\t}\n\t\n\treturn sum/cells;\n}\n\n/**\n * Computes the average value for each column of a matrix of values. \n * @param input A matrix of the input values\n * @returns Vector Average value for each column. Vector[i] is the average for column i.\n */\nfunction calculateColumnAverage(inputMatrix)\n{\n\tvar rows = inputMatrix.rows();\n\t\n\tvar averages = new Array();\n\tfor(var i = 1; i <= inputMatrix.cols(); i++)\n\t{\n\t\tvar sum = 0;\n\t\tfor(var j = 1; j <= inputMatrix.rows(); j++)\n\t\t{\n\t\t\tsum += inputMatrix.e(j, i);\n\t\t}\n\t\taverages[i-1] = sum/rows;\n\t}\n\t\n\treturn $V(averages);\n}\n\n/**\n * Computes the average value for each row of a matrix of values. \n * @param input A matrix of the input values\n * @returns Vector Average value for each row. Vector[i] is the average for row i.\n */\nfunction calculateRowAverage(inputMatrix)\n{\n\tvar cols = inputMatrix.cols();\n\t\n\tvar averages = new Array();\n\tfor(var i = 1; i <= inputMatrix.rows(); i++)\n\t{\n\t\tvar sum = 0;\n\t\tfor(var j = 1; j <= inputMatrix.cols(); j++)\n\t\t{\n\t\t\tsum += inputMatrix.e(i, j);\n\t\t}\n\t\taverages[i-1] = sum/cols;\n\t}\n\t\n\treturn $V(averages);\n}\n\n/**\n * Model representation object. Contains both input and estimated values.\n */\nfunction Model(inputMatrix, rowLabels, colLabels) {\n\tthis.rowLabels = rowLabels;\t// labels for the rows\n\tthis.colLabels = colLabels; // labels for the columns\n\tthis.input = inputMatrix;\t// input data\n\t\n\t// estimated data, initialized to all zeros\n\tthis.estimated = sylvester.Matrix.Zeros(this.input.rows(),this.input.cols());\n}\nModel.prototype = {\n\t/**\n\t * Returns all items for a given row, sorted by rating.\n\t * @param row The row to return values for\n\t * @returns Array An array of arrays, each containing two entries. [0] is the index and [1] is the value, sorted by value.\n\t */\n\trankAllItems: function(row)\n\t{\n\t\tvar rowIndex = row; // assume row is a number\n\t\t// If we're using labels we have to look up the row index\n\t\tif(this.rowLabels)\n\t\t{\n\t\t\trowIndex = findInArray(this.rowLabels, row);\n\t\t}\n\t\t\n\t\t// estimates for this user\n\t\tvar ratingElements = this.estimated.row(rowIndex+1).elements;\n\t\t\n\t\t// build a two dimensional array from the ratings and indexes\n\t\t//     [[index, rating], [index, rating]]\n\t\tvar outputArray = new Array();\n\t\tfor(var i=0; i<ratingElements.length; i++)\n\t\t{\n\t\t\toutputArray[i] = [i, ratingElements[i]];\n\t\t\t\n\t\t\t// if we have column labels, use those\n\t\t\tif(this.colLabels)\n\t\t\t{\n\t\t\t\toutputArray[i][0] = this.colLabels[i];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Sort the array by index\n\t\treturn outputArray.sort(function(a, b) {return a[1] < b[1]})\n\t},\n\t\n\t/**\n\t * Returns all items for the given row where there was no input value, sorted by rating.\n\t * @param row The row to return values for\n\t * @returns Array An array of arrays, each containing two entries. [0] is the index and [1] is the value, sorted by value. \n\t */\n\trecommendations: function(row)\n\t{\n\t\tvar recommendedItems = new Array();\n\t\tvar allItems = this.rankAllItems(row);\n\t\t\t\n\t\tvar rowIndex = row; // assume row is a number\n\t\t// If we're using labels we have to look up the row index\n\t\tif(this.rowLabels)\n\t\t{\n\t\t\trowIndex = findInArray(this.rowLabels, row);\n\t\t}\n\t\t\n\t\tfor(var i=0; i< allItems.length; i++)\n\t\t{\n\t\t\t// look up the value in the input\n\t\t\tvar colIndex = allItems[i][0];\n\t\t\t// see if we're using column labels or not\n\t\t\tif(this.colLabels) \n\t\t\t{\n\t\t\t\tcolIndex = findInArray(this.colLabels, allItems[i][0]);\n\t\t\t}\n\t\t\t\n\t\t\tvar inputRating = this.input.e(rowIndex+1, colIndex+1);\n\t\t\t\n\t\t\t// if there was no rating its a recommendation so add it\n\t\t\tif(inputRating == 0)\n\t\t\t{\n\t\t\t\trecommendedItems.push(allItems[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn recommendedItems;\n\t}\t\n}\n\n/**\n * Finds the specified value in the array and returns the index. Returns -1 if not found.\n * @param array The array to look for the value within\n * @param value The value to look for\n * @returns int Index of the value in the array. -1 if not found.\n */\nfunction findInArray(array, value)\n{\n\tvar index = -1;\n\tfor(var i=0;i<array.length;i++)\n\t{\n\t\tif(array[i] == value) \n\t\t{\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn index;\n}\n\nmodule.exports.buildModel = buildModel;\nmodule.exports.buildModelWithBias = buildModelWithBias;\nmodule.exports.generateRandomMatrix = generateRandomMatrix;\nmodule.exports.calculateError = calculateError;\nmodule.exports.calculateTotalError = calculateTotalError;\nmodule.exports.calculateBias = calculateBias;\nmodule.exports.calculateMatrixAverage = calculateMatrixAverage;\nmodule.exports.calculateColumnAverage = calculateColumnAverage;\nmodule.exports.calculateRowAverage = calculateRowAverage;\n\nmodule.exports.DESCENT_STEPS = DESCENT_STEPS;\nmodule.exports.ALPHA = ALPHA;\nmodule.exports.BETA = BETA;\nmodule.exports.K = K;\nmodule.exports.MAX_ERROR = MAX_ERROR;\n\nmodule.exports.Bias = Bias;\nmodule.exports.Model = Model;\n\n"}